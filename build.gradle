buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE")
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
    id 'jacoco'
}

group = 'chat.room'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

bootJar {
    baseName = 'chat-room'
    version =  '1.0.0'
}

repositories {
	mavenCentral()
}

ext {
    swaggerVersion = "2.9.2"
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.10"
    mockitoVersion = "3.0.0"
}

sourceSets {
    main.java.srcDirs += "build/generated/sources/annotationProcessor/java/main"
    integrationTest {
        java {
		    compileClasspath += main.runtimeClasspath + test.runtimeClasspath + main.compileClasspath
            runtimeClasspath += main.output + compileClasspath
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestRuntime.extendsFrom testCompileOnly
    integrationTestCompile.extendsFrom testImplementation
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
	testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dependencies {
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compile "org.mapstruct:mapstruct:${mapstructVersion}"
    compile "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.9'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${swaggerVersion}"
    compile group: 'io.springfox', name: 'springfox-swagger2', version: "${swaggerVersion}"
    
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testCompile group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

compileJava {
    options.compilerArgs = [
        '-Amapstruct.defaultComponentModel=spring'
    ]
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
	executionData(file("${buildDir}/jacoco/test.exec"),
                  file("${buildDir}/jacoco/integrationTest.exec"))
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco/reports")
    }
}

test {
	useJUnitPlatform()
	testLogging.showStandardStreams=true

    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}